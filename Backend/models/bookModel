import { query } from 'express';
import db from '../db.js';
import { Author } from './authorModel.js';

console.log("Inside the bookModle");

class Book {
    static async create(newBook) {
        console.log("Insert query in book.create", query);
        console.log("newbook Object:", newBook);
        

        return new Promise((resolve, reject) => {
            db.run("INSERT INTO Books (title, author_id, isbn, edition, cost) VALUES (?, ?, ?, ?, ?)", 
                [newBook.title, newBook.author_id, newBook.isbn, newBook.edition, newBook.cost],
                function(err) { 
                    if (err) {
                       reject(err);
                   } else {
                       const book_id = this.lastID; // Get the ID
                       console.log("Created Book ID:", book_id); // Log inside callback 
                       resolve("Book Created"); 
                   }
               });
       }); 
   } 

    static async find() { // Function to fetch all books
        return new Promise((resolve, reject) => { 
            db.all('SELECT * FROM Books', (err, rows) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows); 
                }
            }); 
        }); 
    } 
    
    static async findByIsbn(isbn) {
        return new Promise((resolve, reject) => {
            const sql = 'SELECT * FROM Books WHERE isbn = ?'; 
            db.get(sql, [isbn], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(row); // Resolve with the row if found, otherwise undefined
                }
            }); 
        }); 
    }

    static async findByID(id) {
        return new Promise((resolve, reject) => {
            const sql = 'SELECT * FROM Books WHERE book_id = ?'; 
            db.get(sql, [id], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(row); // Resolve with the row if found, otherwise undefined
                }
            }); 
        }); 
    }

    async deleteByIsbn(isbn) { 
        const sql = 'DELETE FROM books WHERE isbn = ?';
        
        return new Promise((resolve, reject) => {
            db.run(sql, [isbn], function(err) {
                if (err) {
                    reject(err); 
                } else {
                    resolve({ 
                        deleted: true, 
                        changes: this.changes 
                    }); 
                } 
            });
        });
    }

}

export {Book};
 

