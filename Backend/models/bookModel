import { query } from 'express';
import  openDB  from '../db.js';
import Author  from './authorModel.js';

console.log("Inside the bookModel");

class Book {
    async create(newBook) {
        console.log("Insert query in book.create", query);
        console.log("newbook Object:", newBook);
        const db = openDB();// Get the DB oject 

        return new Promise((resolve, reject) => {
            db.run("INSERT INTO Books (title, author_id, isbn, edition, cost) VALUES (?, ?, ?, ?, ?)", 
                [newBook.title, newBook.author_id, newBook.isbn, newBook.edition, newBook.cost],
                function(err) { 
                    if (err) {
                       reject(err);
                   } else {
                       const book_id = this.lastID; // Get the ID
                       console.log("Created Book ID:", book_id); // Log inside callback 
                       resolve("Book Created"); 
                   }
               });
       }); 
   } 

    async findByIsbn(isbn) {
        console.log("inside the findByIsnb function");
        const sql = 'SELECT book_id FROM Books WHERE isbn = ?';
        const db = openDB();// Get the DB oject 
        return new Promise((resolve, reject) => {
            db.get(sql, [isbn], (err, row) => {
                if (err) {
                reject(err);
            } else if (!row) { 
                resolve(null); // Return null if the book is not found
            } else {
                resolve(row); // Return the book data, including book_id
            }
        });
      });
    }

    async find() { // Function to fetch all books
        const db = openDB();// Get the DB oject 
        return new Promise((resolve, reject) => { 
            db.all('SELECT b.*, i.quantity FROM Books b JOIN Inventory i ON b.book_id = i.book_id', (err, rows) => {
                if (err) {
                    console.error("Error in Book.find():", err);
                    reject(err);
                } else {
                    //console.log("Rows from Book.find():", rows);
                    resolve(rows); 
                }
            }); 
        }); 
    } 
    
    async findByID(id) {
        const db = openDB();// Get the DB oject 
        return new Promise((resolve, reject) => {
            const sql = `SELECT Books.title, Books.book_id, Books.isbn, Books.edition, Books.cost, CONCAT(Authors.first_name, ' ', Authors.last_name) AS author_fullName, Genre.category
            FROM Books
            JOIN Authors ON Books.author_id = Authors.author_id
            JOIN Genre ON Books.genre_id = Genre.genre_id 
            WHERE Books.book_id = ?`; 
            db.get(sql, [id], (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(row); // Resolve with the row if found, otherwise undefined
                }
            }); 
        }); 
    }

    async deleteByIsbn(isbn) {  
        const db = openDB();// Get the DB oject      
        return new Promise((resolve, reject) => {
            const sql = 'DELETE FROM books WHERE isbn = ?';
            db.run(sql, [isbn], function(err) {
                if (err) {
                    reject(err); 
                } else {
                    resolve({ 
                        deleted: true, 
                        changes: this.changes 
                    }); 
                } 
            });
        });
    }


    async updateBook(book, updates) {
              
        const updateFields = [];
        const parameters = [];
      
        if (updates.cost !== undefined) {
          updateFields.push('cost = ?');
          parameters.push(updates.cost);
        }
      
        if (updates.quantity !== undefined) {
          updateFields.push('quantity = ?');
          parameters.push(updates.quantity);
        }
        
        //Check if there are any fileds to update
        if (updateFields.length === 0) {
            return Promise.resolve({ updated: false });
        }

        
        const sql = `
            UPDATE Inventory
            SET ${updateFields.join(', ')}
            WHERE book_id = ?
        `;
        parameters.push(book.book_id); 
        const db = openDB();// Get the DB oject 
        return new Promise((resolve, reject) => {
          db.run(sql, parameters, (err) => {
            if (err) {
              reject(err);
            } else {
              resolve({ updated: true });
            }
          });
        });
    }

}

export default new Book();
 

